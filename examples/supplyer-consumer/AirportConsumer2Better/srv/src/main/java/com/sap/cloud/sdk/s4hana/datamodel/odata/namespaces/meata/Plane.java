/*
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */

/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 2.28.0
 */

package com.sap.cloud.sdk.s4hana.datamodel.odata.namespaces.meata;

import java.time.ZonedDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.connectivity.ErpConfigContext;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.s4hana.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.s4hana.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.s4hana.datamodel.odata.namespaces.meata.field.PlaneField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.namespaces.meata.link.PlaneLink;
import com.sap.cloud.sdk.s4hana.datamodel.odata.namespaces.meata.link.PlaneOneToOneLink;
import com.sap.cloud.sdk.s4hana.datamodel.odata.namespaces.meata.selectable.PlaneSelectable;
import com.sap.cloud.sdk.s4hana.datamodel.odata.services.MeataService;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>Plane</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class Plane
    extends VdmEntity<Plane>
{

    /**
     * Selector for all available fields of Plane.
     * 
     */
    public final static PlaneSelectable ALL_FIELDS = new PlaneSelectable() {


        @Nonnull
        @Override
        public String getFieldName() {
            return "*";
        }

        @Nonnull
        @Override
        public List<String> getSelections() {
            return Collections.singletonList("*");
        }

    }
    ;
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>modifiedAt</b></p>
     * 
     * @return
     *     The modifiedAt contained in this entity.
     */
    @SerializedName("modifiedAt")
    @JsonProperty("modifiedAt")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonZonedDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonZonedDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ZonedDateTimeAdapter.class)
    @ODataField(odataName = "modifiedAt", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ZonedDateTimeCalendarConverter.class)
    private ZonedDateTime modifiedAt;
    /**
     * Use with available fluent helpers to apply the <b>modifiedAt</b> field to query operations.
     * 
     */
    public final static PlaneField<ZonedDateTime> MODIFIED_AT = new PlaneField<ZonedDateTime>("modifiedAt");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>createdAt</b></p>
     * 
     * @return
     *     The createdAt contained in this entity.
     */
    @SerializedName("createdAt")
    @JsonProperty("createdAt")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonZonedDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonZonedDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ZonedDateTimeAdapter.class)
    @ODataField(odataName = "createdAt", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ZonedDateTimeCalendarConverter.class)
    private ZonedDateTime createdAt;
    /**
     * Use with available fluent helpers to apply the <b>createdAt</b> field to query operations.
     * 
     */
    public final static PlaneField<ZonedDateTime> CREATED_AT = new PlaneField<ZonedDateTime>("createdAt");
    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>createdBy</b></p>
     * 
     * @return
     *     The createdBy contained in this entity.
     */
    @SerializedName("createdBy")
    @JsonProperty("createdBy")
    @Nullable
    @ODataField(odataName = "createdBy")
    private String createdBy;
    /**
     * Use with available fluent helpers to apply the <b>createdBy</b> field to query operations.
     * 
     */
    public final static PlaneField<String> CREATED_BY = new PlaneField<String>("createdBy");
    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>modifiedBy</b></p>
     * 
     * @return
     *     The modifiedBy contained in this entity.
     */
    @SerializedName("modifiedBy")
    @JsonProperty("modifiedBy")
    @Nullable
    @ODataField(odataName = "modifiedBy")
    private String modifiedBy;
    /**
     * Use with available fluent helpers to apply the <b>modifiedBy</b> field to query operations.
     * 
     */
    public final static PlaneField<String> MODIFIED_BY = new PlaneField<String>("modifiedBy");
    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>ID</b></p>
     * 
     * @return
     *     The iD contained in this entity.
     */
    @Key
    @SerializedName("ID")
    @JsonProperty("ID")
    @Nullable
    @ODataField(odataName = "ID")
    private Integer iD;
    /**
     * Use with available fluent helpers to apply the <b>ID</b> field to query operations.
     * 
     */
    public final static PlaneField<Integer> ID = new PlaneField<Integer>("ID");
    /**
     * Constraints: Not nullable, Maximum length: 1111 <p>Original property name from the Odata EDM: <b>descr</b></p>
     * 
     * @return
     *     The descr contained in this entity.
     */
    @SerializedName("descr")
    @JsonProperty("descr")
    @Nullable
    @ODataField(odataName = "descr")
    private String descr;
    /**
     * Use with available fluent helpers to apply the <b>descr</b> field to query operations.
     * 
     */
    public final static PlaneField<String> DESCR = new PlaneField<String>("descr");
    /**
     * Navigation property <b>texts</b> for <b>Plane</b> to multiple <b>Plane_texts</b>.
     * 
     */
    @SerializedName("texts")
    @JsonProperty("texts")
    @ODataField(odataName = "texts")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<Plane_texts> toTexts;
    /**
     * Navigation property <b>localized</b> for <b>Plane</b> to single <b>Plane_texts</b>.
     * 
     */
    @SerializedName("localized")
    @JsonProperty("localized")
    @ODataField(odataName = "localized")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private Plane_texts toLocalized;
    /**
     * Use with available fluent helpers to apply the <b>texts</b> navigation property to query operations.
     * 
     */
    public final static PlaneLink<Plane_texts> TO_TEXTS = new PlaneLink<Plane_texts>("texts");
    /**
     * Use with available fluent helpers to apply the <b>localized</b> navigation property to query operations.
     * 
     */
    public final static PlaneOneToOneLink<Plane_texts> TO_LOCALIZED = new PlaneOneToOneLink<Plane_texts>("localized");

    /**
     * {@inheritDoc}
     * 
     */
    @Nonnull
    @Override
    public Class<Plane> getType() {
        return Plane.class;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>modifiedAt</b></p>
     * 
     * @param modifiedAt
     *     The modifiedAt to set.
     */
    public void setModifiedAt(
        @Nullable
        final ZonedDateTime modifiedAt) {
        rememberChangedField("modifiedAt", this.modifiedAt);
        this.modifiedAt = modifiedAt;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>createdAt</b></p>
     * 
     * @param createdAt
     *     The createdAt to set.
     */
    public void setCreatedAt(
        @Nullable
        final ZonedDateTime createdAt) {
        rememberChangedField("createdAt", this.createdAt);
        this.createdAt = createdAt;
    }

    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>createdBy</b></p>
     * 
     * @param createdBy
     *     The createdBy to set.
     */
    public void setCreatedBy(
        @Nullable
        final String createdBy) {
        rememberChangedField("createdBy", this.createdBy);
        this.createdBy = createdBy;
    }

    /**
     * Constraints: Not nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>modifiedBy</b></p>
     * 
     * @param modifiedBy
     *     The modifiedBy to set.
     */
    public void setModifiedBy(
        @Nullable
        final String modifiedBy) {
        rememberChangedField("modifiedBy", this.modifiedBy);
        this.modifiedBy = modifiedBy;
    }

    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>ID</b></p>
     * 
     * @param iD
     *     The iD to set.
     */
    public void setID(
        @Nullable
        final Integer iD) {
        rememberChangedField("ID", this.iD);
        this.iD = iD;
    }

    /**
     * Constraints: Not nullable, Maximum length: 1111 <p>Original property name from the Odata EDM: <b>descr</b></p>
     * 
     * @param descr
     *     The descr to set.
     */
    public void setDescr(
        @Nullable
        final String descr) {
        rememberChangedField("descr", this.descr);
        this.descr = descr;
    }

    @Override
    protected String getEntityCollection() {
        return "Plane";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("ID", getID());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("modifiedAt", getModifiedAt());
        values.put("createdAt", getCreatedAt());
        values.put("createdBy", getCreatedBy());
        values.put("modifiedBy", getModifiedBy());
        values.put("ID", getID());
        values.put("descr", getDescr());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("modifiedAt")) {
                final Object value = values.remove("modifiedAt");
                if ((value == null)||(!value.equals(getModifiedAt()))) {
                    setModifiedAt(((ZonedDateTime) value));
                }
            }
            if (values.containsKey("createdAt")) {
                final Object value = values.remove("createdAt");
                if ((value == null)||(!value.equals(getCreatedAt()))) {
                    setCreatedAt(((ZonedDateTime) value));
                }
            }
            if (values.containsKey("createdBy")) {
                final Object value = values.remove("createdBy");
                if ((value == null)||(!value.equals(getCreatedBy()))) {
                    setCreatedBy(((String) value));
                }
            }
            if (values.containsKey("modifiedBy")) {
                final Object value = values.remove("modifiedBy");
                if ((value == null)||(!value.equals(getModifiedBy()))) {
                    setModifiedBy(((String) value));
                }
            }
            if (values.containsKey("ID")) {
                final Object value = values.remove("ID");
                if ((value == null)||(!value.equals(getID()))) {
                    setID(((Integer) value));
                }
            }
            if (values.containsKey("descr")) {
                final Object value = values.remove("descr");
                if ((value == null)||(!value.equals(getDescr()))) {
                    setDescr(((String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((values).containsKey("texts")) {
                final Object value = (values).remove("texts");
                if (value instanceof Iterable) {
                    if (toTexts == null) {
                        toTexts = Lists.newArrayList();
                    } else {
                        toTexts = Lists.newArrayList(toTexts);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        Plane_texts entity;
                        if (toTexts.size()>i) {
                            entity = toTexts.get(i);
                        } else {
                            entity = new Plane_texts();
                            toTexts.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("localized")) {
                final Object value = (values).remove("localized");
                if (value instanceof Map) {
                    if (toLocalized == null) {
                        toLocalized = new Plane_texts();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toLocalized.fromMap(inputMap);
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >PlaneField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new PlaneField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >PlaneField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new PlaneField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public ErpConfigContext getErpConfigContext() {
        return super.getErpConfigContext();
    }

    /**
     * 
     * @deprecated
     *     Use {@link #attachToService(String, ErpConfigContext)} instead.
     */
    @Override
    @Deprecated
    public void setErpConfigContext(
        @Nullable
        final ErpConfigContext erpConfigContext) {
        super.setErpConfigContext(erpConfigContext);
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nullable
        final ErpConfigContext configContext) {
        super.attachToService(servicePath, configContext);
    }

    @Override
    protected String getDefaultServicePath() {
        return MeataService.DEFAULT_SERVICE_PATH;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toTexts!= null) {
            (values).put("texts", toTexts);
        }
        if (toLocalized!= null) {
            (values).put("localized", toLocalized);
        }
        return values;
    }

    /**
     * Fetches the <b>Plane_texts</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>texts</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>Plane_texts</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Plane_texts> fetchTexts()
        throws ODataException
    {
        final ErpConfigContext erpConfigContext = getErpConfigContext();
        if (erpConfigContext == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type Plane_texts.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned ERP configuration context. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("ID=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.Int32).toUri(iD));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("texts");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final ODataQueryResult result = query.execute(erpConfigContext);
        final List<Plane_texts> entityList = result.asList(Plane_texts.class);
        for (Plane_texts entity: entityList) {
            entity.attachToService(getServicePathForFetch(), erpConfigContext);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>Plane_texts</b> entities (one to many). This corresponds to the OData navigation property <b>texts</b>.
     * <p>
     * If the navigation property <b>texts</b> of a queried <b>Plane</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>Plane_texts</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<Plane_texts> getTextsOrFetch()
        throws ODataException
    {
        if (toTexts == null) {
            toTexts = fetchTexts();
        }
        return toTexts;
    }

    /**
     * Retrieval of associated <b>Plane_texts</b> entities (one to many). This corresponds to the OData navigation property <b>texts</b>.
     * <p>
     * If the navigation property for an entity <b>Plane</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Optional</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>texts</b> is already loaded, the result will contain the <b>Plane_texts</b> entities. If not, an <code>Optional</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Optional<List<Plane_texts>> getTextsIfPresent() {
        return Optional.ofNullable(toTexts);
    }

    /**
     * Overwrites the list of associated <b>Plane_texts</b> entities for the loaded navigation property <b>texts</b>.
     * <p>
     * If the navigation property <b>texts</b> of a queried <b>Plane</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>Plane_texts</b> entities.
     */
    public void setTexts(
        @Nonnull
        final List<Plane_texts> value) {
        if (toTexts == null) {
            toTexts = Lists.newArrayList();
        }
        toTexts.clear();
        toTexts.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Plane_texts</b> entities. This corresponds to the OData navigation property <b>texts</b>.
     * <p>
     * If the navigation property <b>texts</b> of a queried <b>Plane</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>Plane_texts</b> entities.
     */
    public void addTexts(Plane_texts... entity) {
        if (toTexts == null) {
            toTexts = Lists.newArrayList();
        }
        toTexts.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>Plane_texts</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>localized</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>Plane_texts</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public Plane_texts fetchLocalized()
        throws ODataException
    {
        final ErpConfigContext erpConfigContext = getErpConfigContext();
        if (erpConfigContext == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type Plane_texts.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned ERP configuration context. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("ID=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.Int32).toUri(iD));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("localized");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final ODataQueryResult result = query.execute(erpConfigContext);
        final Plane_texts entity = result.as(Plane_texts.class);
        entity.attachToService(getServicePathForFetch(), erpConfigContext);
        return entity;
    }

    /**
     * Retrieval of associated <b>Plane_texts</b> entity (one to one). This corresponds to the OData navigation property <b>localized</b>.
     * <p>
     * If the navigation property <b>localized</b> of a queried <b>Plane</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>Plane_texts</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public Plane_texts getLocalizedOrFetch()
        throws ODataException
    {
        if (toLocalized == null) {
            toLocalized = fetchLocalized();
        }
        return toLocalized;
    }

    /**
     * Retrieval of associated <b>Plane_texts</b> entity (one to one). This corresponds to the OData navigation property <b>localized</b>.
     * <p>
     * If the navigation property for an entity <b>Plane</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Optional</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>localized</b> is already loaded, the result will contain the <b>Plane_texts</b> entity. If not, an <code>Optional</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Optional<Plane_texts> getLocalizedIfPresent() {
        return Optional.ofNullable(toLocalized);
    }

    /**
     * Overwrites the associated <b>Plane_texts</b> entity for the loaded navigation property <b>localized</b>.
     * 
     * @param value
     *     New <b>Plane_texts</b> entity.
     */
    public void setLocalized(final Plane_texts value) {
        toLocalized = value;
    }


    /**
     * Helper class to allow for fluent creation of Plane instances.
     * 
     */
    public final static class PlaneBuilder {

        private List<Plane_texts> toTexts = Lists.newArrayList();
        private Plane_texts toLocalized;

        private Plane.PlaneBuilder toTexts(final List<Plane_texts> value) {
            toTexts.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>texts</b> for <b>Plane</b> to multiple <b>Plane_texts</b>.
         * 
         * @param value
         *     The Plane_textss to build this Plane with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Plane.PlaneBuilder texts(Plane_texts... value) {
            return toTexts(Lists.newArrayList(value));
        }

        private Plane.PlaneBuilder toLocalized(final Plane_texts value) {
            toLocalized = value;
            return this;
        }

        /**
         * Navigation property <b>localized</b> for <b>Plane</b> to single <b>Plane_texts</b>.
         * 
         * @param value
         *     The Plane_texts to build this Plane with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Plane.PlaneBuilder localized(final Plane_texts value) {
            return toLocalized(value);
        }

    }

}
